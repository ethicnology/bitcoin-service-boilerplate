require('dotenv').config()
const axios = require('axios')

const url = `http://${process.env.BTC_USER}:${process.env.BTC_PASS}@${process.env.BTC_HOST}:${process.env.BTC_PORT}`
const headers = { 'content-type': 'text/plain;' }

/**
 * @return {Promise} represents the bitcoin chain info.
 */
const getBlockchainInfo = async () => new Promise((resolve, reject) => {
  const body = {
    jsonrpc: '1.0',
    method: 'getblockchaininfo'
  }
  axios
    .post(url, body, headers)
    .then((response) => {
      resolve(response.data.result.chain)
    }).catch((error) => {
      reject(error)
    })
})

/**
 * @returns {Promise} represents the Bitcoin address generated by the node.
 */
const getNewAddress = async () => new Promise((resolve, reject) => {
  const body = {
    jsonrpc: '1.0',
    method: 'getnewaddress'
  }
  axios
    .post(url, body, headers)
    .then((response) => {
      resolve(response.data.result)
    }).catch((error) => {
      reject(error)
    })
})

/**
 * @param {String} address
 * @param {Number} amount
 * @param {String} hex
 * @returns {Promise} represents the raw transaction hex skeleton.
 */
const createRawTransaction = async (address, amount, hex) =>
  new Promise((resolve, reject) => {
    const inputs = []
    let outputs = null
    if (hex) {
      outputs = [
        {
          [address]: amount
        },
        {
          data: hex
        }
      ]
    } else {
      outputs = [
        {
          [address]: amount
        }
      ]
    }
    const data = {
      jsonrpc: '1.0',
      method: 'createrawtransaction',
      params: [
        inputs,
        outputs
      ]
    }
    axios
      .post(url, data, headers)
      .then((response) => {
        resolve(response.data.result)
      }).catch((error) => {
        reject(error)
      })
  })

/**
 * @param {String} hex
 * @returns {Promise} represents the hex string of the funded raw transaction.
 */
const fundRawTransaction = async (hex) => new Promise((resolve, reject) => {
  const body = {
    jsonrpc: '1.0',
    method: 'fundrawtransaction',
    params: [
      hex
    ]
  }
  axios
    .post(url, body, headers)
    .then((response) => {
      resolve(response.data.result)
    }).catch((error) => {
      reject(error)
    })
})

/**
 * @param {String} hex
 * @returns {Promise} represents the hex string of the signed raw transaction.
 */
const signRawTransactionWithWallet = async (hex) => new Promise((resolve, reject) => {
  const body = {
    jsonrpc: '1.0',
    method: 'signrawtransactionwithwallet',
    params: [
      hex
    ]
  }
  axios
    .post(url, body, headers)
    .then((response) => {
      resolve(response.data.result)
    }).catch((error) => {
      reject(error)
    })
})

/**
 * @param {String} hex
 * @returns {Promise} represents the txid in Bitcoin of the sent transaction.
 */
const sendRawTransaction = async (hex) => new Promise((resolve, reject) => {
  const body = {
    jsonrpc: '1.0',
    method: 'sendrawtransaction',
    params: [
      hex
    ]
  }
  axios
    .post(url, body, headers)
    .then((response) => {
      resolve(response.data.result)
    }).catch((error) => {
      reject(error)
    })
})

module.exports = {
  getNewAddress,
  getBlockchainInfo,
  createRawTransaction,
  fundRawTransaction,
  signRawTransactionWithWallet,
  sendRawTransaction
}
